const ListItems = dynamic(() => import('@spo/components/item/list-items'), {
    ssr: false,
});
const Header = dynamic(() => import('@spo/components/spo-layout/header'), {
    ssr: false,
});
import constants from '@spo/config/constants';
import HomeActions from '@spo/redux/home/action';
import ProducListTopActions from '@spo/redux/product-list-top/action';
import dynamic from 'next/dynamic';
import { useRouter } from 'next/router';
import React, { useEffect, useRef, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import HeaderBarFilter from '@spo/components/filter/header-bar-filter';
import CustomPagination from '@spo/components/common/custom-pagination';
import CommonActions from '@spo/redux/common/action';
import BreadCrumb from './../../components/common/breadcrumb';
import { scrollTop } from '../../library/helper';
import EmptyDataComponent from '../../components/common/empty-data';
/**
 * ****************************************************************************
 * HAIDT Index CODE
 * index.js
 *
 * description		:
 * created at		:	2020-11-16
 * created by		:	HAIDT
 * package			:	spo\shared\containers\product-list-golden-hour\index.js
 * copyright			:	Copyright (c) HAIDT
 * version			:	1.0.0
 * ****************************************************************************
 */
const ProductListTopContainer = (props) => {
    const dispatch = useDispatch();
    const router=useRouter();
    const typeDisplay = useSelector((state) => state.App.typeDisplay);
    const { loading, data, limit, total, offset } = useSelector(
        (state) => state.ProductListTop,
    );
    const [currentParamFilter, setCurrentParamFilter] = useState(null);
    useEffect(() => {
        dispatch({
            type: CommonActions.LOAD_CATEGORY_MASTER_BY_GENDER,
            data: {
                Type: constants.TYPE_SEARCH.PRODUCT_TYPE.PRODUCT_SEARCH_TOP,
            },
        });
        dispatch({
            type: CommonActions.LOAD_SIZE,
        });
        let param = {};
        param['Type'] = constants.TYPE_SEARCH.PRODUCT_TYPE.PRODUCT_SEARCH_TOP;
        param['Limit'] = constants.PAGINATION_PRODUCT_LIST.LIMIT;
        param['Offset'] = constants.PAGINATION_PRODUCT_LIST.OFFSET;
        setCurrentParamFilter(param);
    }, []);
    function handlePageChange(pageNumber) {
        // let param = {};
        // param.Type = constants.TYPE_SEARCH.PRODUCT_TYPE.PRODUCT_SEARCH_TOP;
        // param.Limit = constants.PAGINATION_PRODUCT_LIST.LIMIT;
        // param.Offset = (pageNumber - 1) * param.Limit;
        // dispatch({
        //     type: ProducListTopActions.LOAD_TOP_PRODUCT_LIST,
        //     data: { data: param },
        // });
        if(currentParamFilter){
            const param = currentParamFilter;
            const routerParam = { ...router.query };
            param['Offset'] = (pageNumber - 1) * param.Limit;
            // dispatch({
            //     type: ProducListTopActions.LOAD_TOP_PRODUCT_LIST,
            //     data: { data: param },
            // });
            routerParam.Page = pageNumber;
            router.push({
                pathname: router.pathname,
                query: {
                    ...router.query,
                    Page: pageNumber,
                }
            });
        }
        scrollTop();
    }
    // function handleFilter(e) {
    //     let param = {};
    //     const routerParam = { ...router.query };
    //     param.Type = constants.TYPE_SEARCH.PRODUCT_TYPE.PRODUCT_SEARCH_TOP;
    //     param.Limit = constants.PAGINATION_PRODUCT_LIST.LIMIT;
    //     param.Offset = 0;
    //     routerParam.Page = 1;
    //     if (e.orderByPrice) {
    //         routerParam.Sort = param["Sort"] = e.orderByPrice;
    //     }else {
    //         delete routerParam.Sort;
    //     }
    //     if (e.filterSex) {
    //         routerParam.Gender = param["Gender"] = e.filterSex;
    //     }else {
    //         delete routerParam.Gender;
    //     }
    //     if (e.filterCategory.length > 0) {
    //         routerParam.CategoryId = param["CategoryId"] = e.filterCategory.join(",");
    //     }else {
    //         delete routerParam.CategoryId;
    //     }
    //     if (e.filterSize.length > 0) {
    //         routerParam.SizeId = param["SizeId"] = e.filterSize.join(",");
    //     } else {
    //       delete routerParam.SizeId;
    //     }
    //     if (e.filterPromotion.length > 0) {
    //         routerParam.TypeOfPromotion = param[
    //             "TypeOfPromotion"
    //         ] = e.filterPromotion.join(",");
    //     } else {
    //         delete routerParam.TypeOfPromotion;
    //     }
    //     if (e.filterPrice && (e.filterPrice.startPrice || e.filterPrice.endPrice)) {
    //         routerParam.PriceFrom = param["PriceFrom"] = e.filterPrice.startPrice;
    //         routerParam.PriceTo = param["PriceTo"] = e.filterPrice.endPrice;
    //     } else {
    //         delete routerParam.PriceFrom;
    //         delete routerParam.PriceTo;
    //     }
    //     setCurrentParamFilter(param);
    //     // dispatch({
    //     //     type: ProducListTopActions.LOAD_TOP_PRODUCT_LIST,
    //     //     data: { data: param },
    //     // });
    //     delete router.query.paramName;
    //     router.replace(
    //         {
    //             pathname: router.pathname,
    //             query: {
    //                 ...routerParam,
    //             },
    //         },
    //         undefined,
    //         { shallow: true }
    //     );
    // }

    const data_bread_crumb = [
        { name: 'Trang chủ', path_name: '/' },
        { name: 'Tìm kiếm hàng đầu', path_name: '/' },
    ];
    const [breadcrum, setBreadcrum] = useState(data_bread_crumb);

    return (
        <>
            <div className="product-list-with-type">
                {/* <Header /> */}
                {/* <BreadCrumb data={breadcrum} /> */}
                <HeaderBarFilter
                    isShowFilter={true}
                    isShowSortLocation={false}
                    dataFilter={router.query}
                    // onChange={(e) => handleFilter(e)}
                />
                <div className="pd-lr-common product-list-content">
                    <div className="row px-0 product-content mx-0">
                        <div className="col-12 px-0">
                            <div className="product-list-item">
                                <div className="col-12 col-sm-12 col-md-12 col-lg-12 px-0">

                                    {total.total > 0 || total.total == null ? ( <>
                                        <ListItems
                                            isViewInSlider={false}
                                            items={data.topProductList}
                                            loading={loading.loadingTopProductList}
                                            isShowMore={true}
                                            isFullWidth={true}
                                            isBorderTop={false}
                                            typeDisplay={typeDisplay}
                                            textColor="#000000"
                                        />
                                    </>
                                    ) : <EmptyDataComponent message="Không có sản phẩm"/>
                                    }
                                    {total.total > 0 && (
                                        <CustomPagination
                                            limit={constants.PAGINATION_PRODUCT_LIST.LIMIT}
                                            total={total.total}
                                            pageRangeDisplayed={4}
                                            onChange={(e) =>
                                                handlePageChange(e)
                                            }
                                        />
                                    )}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </>
    );
};

export default ProductListTopContainer;
